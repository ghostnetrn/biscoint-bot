import Biscoint from "biscoint-api-node";
import Bottleneck from "bottleneck";
import { handleMessage, handleError, percent } from "./utils";
//import config from "./config.js";
import { Telegraf, Markup } from 'telegraf';

//let { amount, initialSell, intervalMs, test, differencelogger } = config;

let {
  apiKey, apiSecret, amount, initialSell, intervalMs, test,
  differencelogger, token, botchat
} = require("./env")

const bc = new Biscoint({
  apiKey: apiKey,
  apiSecret: apiSecret,
});

// Telegram
const bot = new Telegraf(token)
let balances

// const keyboard = Markup.inlineKeyboard(
//   [
//     Markup.button.callback('\u{1F9FE} Balance', 'balance'),
//     Markup.button.callback('\u{1F9FE} Configs', 'configs'),
//     Markup.button.callback('\u{1F51B} Test Mode', 'test'),
//     Markup.button.url('‚Çø', 'https://www.biscoint.io')
//   ], { columns: 2 })

const keyboard = Markup.keyboard([
  ['üßæ Balance', 'üîç BTC Price'], // Row1 with 2 buttons
  ['‚ò∏ Configs', 'üîõ Test Mode'], // Row2 with 2 buttons
  ['üìñ Help', '‚Çø Biscoint'] // Row3 with 2 buttons
])
  .oneTime()
  .resize()

bot.hears('üìñ Help', async (ctx) => {
  ctx.replyWithMarkdown(
    `*Comandos dispon√≠veis:* 
      ============  
  *üßæ Balance:* Extrato resumido do saldo na corretora.\n
  *üîç BTC Price:* √öltimo pre√ßo do Bitcoin na corretora.\n
  *‚ò∏ Configs:* Configura√ß√µes do Bot.\n
  *üîõ Test Mode:* Ativar/Desativar modo simula√ß√£o.\n
  *‚Çø:* Acessar a corretora.\n
      ============
      `, keyboard)
}
);

bot.hears('‚Çø Biscoint', async (ctx) => {
  ctx.reply('Acesse a corretora https://biscoint.io', keyboard);
}
);

bot.hears('üßæ Balance', async (ctx) => {
  await checkBalances();
}
);

bot.hears('üîõ Test Mode', async (ctx) => {
  if (test === false) {
    test = true
    ctx.reply('\u{1F6D1} Modo teste ativado!', keyboard);
    checkBalances();
  } else {
    test = false
    ctx.replyWithMarkdown(`\u{1F911} Modo teste desativado!`, keyboard);
    checkBalances();
  }
}
);

bot.hears('‚ò∏ Configs', (ctx) => {
  ctx.replyWithMarkdown(`
‚è±Ô∏è *Intervalo*: ${intervalMs}ms
‚ÑπÔ∏è *Modo teste*: ${test ? 'ativado' : 'desativado'}
‚ÑπÔ∏è *InitialSell*: ${initialSell ? 'ativado' : 'desativado'}
üíµ *Valor em opera√ß√£o*: ${amount}
    `, keyboard)
}
);

bot.hears('üîç BTC Price', async (ctx) => {
  let priceBTC = await bc.ticker();
  ctx.replyWithMarkdown(`*Biscoint:*
üìä *√öltimo pre√ßo:* ${Number(priceBTC.last).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}
üìà *Alta de hoje:* ${Number(priceBTC.high).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}
üìâ *Baixa de hoje:* ${Number(priceBTC.low).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}
 ‚Çø *Volume:* ${Number(priceBTC.vol)} BTC
`, keyboard)
}
);

bot.hears('üíµ Adjust Amount', async (ctx) => {
  await adjustAmount();
}
);

// Telegram End

// Checks that the configured interval is within the allowed rate limit.
const checkInterval = async () => {
  const { endpoints } = await bc.meta();
  const { windowMs, maxRequests } = endpoints.offer.post.rateLimit;
  handleMessage(`Offer Rate limits: ${maxRequests} request per ${windowMs}ms.`);
  let minInterval = 2.0 * parseFloat(windowMs) / parseFloat(maxRequests) + 600;

  if (!intervalMs) {
    intervalMs = minInterval;
    handleMessage(`Setting interval to ${intervalMs}ms`);
  } else if (intervalMs < minInterval) {
    handleMessage(`Interval too small (${intervalMs}ms). Must be higher than ${minInterval}ms`, 'error', true);
  }
};

const limiter = new Bottleneck({
  reservoir: 30,
  reservoirRefreshAmount: 30,
  reservoirRefreshInterval: 60 * 1000,
  maxConcurrent: 1,
});

let tradeCycleCount = 0;

async function trade() {
  try {
    const sellOffer = await bc.offer({
      amount,
      isQuote: false,
      op: "sell",
    });

    const buyOffer = await bc.offer({
      amount,
      isQuote: false,
      op: "buy",
    });

    const profit = percent(buyOffer.efPrice, sellOffer.efPrice);
    if (differencelogger)
      handleMessage(`üìà Varia√ß√£o de pre√ßo: ${profit.toFixed(3)}%`);
    handleMessage(`Test mode: ${test}`);
    handleMessage(`Intervalo: ${intervalMs}ms`);
    if (buyOffer.efPrice < sellOffer.efPrice && !test) {
      handleMessage(`\u{1F911} Sucesso! Lucro: ${profit.toFixed(3)}%`);
      if (initialSell) {
        /* initial sell */
        try {
          await bc.confirmOffer({ offerId: sellOffer.offerId });
          handleMessage("Success on sell");
          try {
            await bc.confirmOffer({
              offerId: buyOffer.offerId,
            });
            handleMessage("Success on buy");
            tradeCycleCount += 1;
            handleMessage(
              `Success, profit: + ${profit.toFixed(
                3
              )}%, cycles: ${tradeCycleCount}`
            );
            bot.telegram.sendMessage(botchat, `\u{1F911} Sucesso! Lucro: ${profit.toFixed(3)}%`, keyboard)
          } catch (error) {
            handleError("Error on buy, retrying", error);
            await forceConfirm("buy", sellOffer.efPrice);
          }
        } catch (error) {
          handleError("Error on sell", error);
          bot.telegram.sendMessage(botchat, `Error on sell: ${error}`, keyboard)
          if (error.error === "Insufficient funds") {
            initialSell = !initialSell;
            handleMessage("Switched to first buy");
          }
        }
      } else {
        /* initial buy */
        try {
          await bc.confirmOffer({ offerId: buyOffer.offerId });
          handleMessage("Success on buy");
          try {
            await bc.confirmOffer({ offerId: sellOffer.offerId });
            handleMessage("Success on sell");
            tradeCycleCount += 1;
            handleMessage(
              `Success, profit: + ${profit.toFixed(
                3
              )}%, cycles: ${tradeCycleCount}`
            );
            bot.telegram.sendMessage(botchat, `\u{1F911} Sucesso! Lucro: ${profit.toFixed(3)}%`, keyboard)
          } catch (error) {
            handleError("Error on sell, retrying", error);
            await forceConfirm("sell", buyOffer.efPrice);
          }
        } catch (error) {
          handleError("Error on buy", error);
          bot.telegram.sendMessage(botchat, `Error on buy: ${error}`, keyboard)
          if (error.error === "Insufficient funds") {
            initialSell = !initialSell;
            handleMessage("Switched to first sell");
          }
        }
      }
    }
  } catch (error) {
    handleError("Error on get offer", error);
  }
}

async function forceConfirm(side, oldPrice) {
  try {
    const offer = await bc.offer({
      amount,
      isQuote: false,
      op: side,
    });

    // if side is buy then compare with sell price
    if (
      (side === "buy" && oldPrice * 1.1 >= Number(offer.efPrice)) ||
      (side === "sell" && oldPrice * 0.9 <= Number(offer.efPrice))
    ) {
      await bc.confirmOffer({ offerId: offer.offerId });
      handleMessage("Success on retry");
    } else { //throw "Error on forceConfirm, price is much distant";
      bot.telegram.sendMessage(botchat, `
      Erro ao Confirmar Ordem, o pre√ßo est√° muito distante.
      Acesse a corretora e verifique!`, keyboard)
    }
  } catch (error) {
    handleError("Error on force confirm", error);
    bot.telegram.sendMessage(botchat, `Erro ao confirmar: ${error}`, keyboard)
  }
}

const checkBalances = async () => {
  try {
    balances = await bc.balance();
    const { BRL, BTC } = balances;
    let priceBTC = await bc.ticker();

    await bot.telegram.sendMessage(botchat,
      `\u{1F911} Balan√ßo:
<b>Status</b>: ${!test ? `\u{1F51B} Rob√¥ operando.` : `\u{1F6D1} Modo simula√ß√£o.`} 
<b>Saldo BRL:</b> ${BRL} 
<b>Saldo BTC:</b> ${BTC} (R$ ${(priceBTC.last * BTC).toFixed(2)})
`, { parse_mode: "HTML" });
    await bot.telegram.sendMessage(botchat, "Extrato resumido. Para maiores detalhes, acesse a corretora Biscoint!", keyboard)

    handleMessage(`Balances:  BRL: ${BRL} - BTC: ${BTC} `);
  } catch (e) {
    bot.telegram.sendMessage(botchat, 'M√°ximo de 12 requisi√ß√µes por minuto. Tente novamente!')
  }
};

const adjustAmount = async () => {
  try {
    balances = await bc.balance();
    const { BRL, BTC } = balances;
    let amountBTC = (BTC * 0.9).toFixed(5)
    if (initialSell && amountBTC >= 0.0001) {
      amount = amountBTC;
      console.log(amount)
      console.log(initialSell)
      bot.telegram.sendMessage(botchat, `üíµ *Valor em opera√ß√£o*: ${amount}`, keyboard)
    } else {
      bot.telegram.sendMessage(botchat, `
      Verifique seus saldos!
      1. BTC tem que ser maior do que 0.0001
      2. Setar initialSell para 'true' na plataforma Heroku
      3. Se seu saldo estiver em Reais, compre Bitcoin na Biscoint!`, keyboard)
    }
  } catch (error) {
    handleMessage(JSON.stringify(error));
    bot.telegram.sendMessage(botchat, JSON.stringify(error))
  }
}

async function start() {
  handleMessage('Starting trades');
  bot.telegram.sendMessage(botchat, '\u{1F911} Iniciando trades!', keyboard);
  await checkInterval();
  await adjustAmount();
  setInterval(() => {
    limiter.schedule(() => trade());
  }, intervalMs);
}

bot.launch()

start().catch(e => handleMessage(JSON.stringify(e), 'error'));